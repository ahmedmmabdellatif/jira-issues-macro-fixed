name: Deploy to Heroku

on:
  workflow_dispatch:
    inputs:
      app_name:
        description: 'Heroku app name'
        required: true
        default: 'jira-issues-macro-fixed-new'

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      
      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '14'
          
      - name: Install dependencies
        run: npm install
        
      - name: Install Heroku CLI
        run: |
          curl https://cli-assets.heroku.com/install.sh | sh
          heroku --version
        
      - name: Login to Heroku
        uses: akhileshns/heroku-deploy@v3.12.12
        with:
          heroku_api_key: ${{ secrets.HEROKU_API_KEY }}
          heroku_app_name: ${{ github.event.inputs.app_name }}
          heroku_email: "atlassianintelligence@gmail.com"
          justlogin: true
          
      - name: Create Heroku app if it doesn't exist
        run: |
          if ! heroku apps:info ${{ github.event.inputs.app_name }} &> /dev/null; then
            echo "Creating new Heroku app: ${{ github.event.inputs.app_name }}"
            heroku apps:create ${{ github.event.inputs.app_name }}
            echo "Created new Heroku app: ${{ github.event.inputs.app_name }}"
          else
            echo "Using existing Heroku app: ${{ github.event.inputs.app_name }}"
          fi
        env:
          HEROKU_API_KEY: ${{ secrets.HEROKU_API_KEY }}
          
      - name: Deploy to Heroku
        uses: akhileshns/heroku-deploy@v3.12.12
        with:
          heroku_api_key: ${{ secrets.HEROKU_API_KEY }}
          heroku_app_name: ${{ github.event.inputs.app_name }}
          heroku_email: "atlassianintelligence@gmail.com"
          
      - name: Verify deployment with timeout
        id: verify_deployment
        timeout-minutes: 3
        run: |
          echo "Verifying deployment..."
          echo "Waiting for app to start up..."
          sleep 15
          
          # Try multiple times with a strict timeout
          MAX_RETRIES=3
          RETRY_COUNT=0
          SUCCESS=false
          
          while [ $RETRY_COUNT -lt $MAX_RETRIES ] && [ "$SUCCESS" = false ]; do
            echo "Attempt $(($RETRY_COUNT + 1)) of $MAX_RETRIES"
            
            # Use curl with a timeout to prevent hanging
            STATUS_CODE=$(curl -s -o /dev/null -w "%{http_code}" --connect-timeout 10 --max-time 20 https://${{ github.event.inputs.app_name }}.herokuapp.com/ || echo "failed")
            
            if [ "$STATUS_CODE" = "200" ] || [ "$STATUS_CODE" = "302" ]; then
              SUCCESS=true
              echo "✅ Deployment successful! App is running at https://${{ github.event.inputs.app_name }}.herokuapp.com/"
              echo "✅ Descriptor URL: https://${{ github.event.inputs.app_name }}.herokuapp.com/atlassian-connect.json"
              
              # Verify descriptor URL with timeout
              DESCRIPTOR_STATUS=$(curl -s -o /dev/null -w "%{http_code}" --connect-timeout 10 --max-time 20 https://${{ github.event.inputs.app_name }}.herokuapp.com/atlassian-connect.json || echo "failed")
              if [ "$DESCRIPTOR_STATUS" = "200" ]; then
                echo "✅ Descriptor URL is accessible"
                echo "::set-output name=app_url::https://${{ github.event.inputs.app_name }}.herokuapp.com/"
                echo "::set-output name=descriptor_url::https://${{ github.event.inputs.app_name }}.herokuapp.com/atlassian-connect.json"
              else
                echo "⚠️ Descriptor URL returned status code: $DESCRIPTOR_STATUS"
                echo "This may be due to app still starting up, but deployment was successful"
                echo "::set-output name=app_url::https://${{ github.event.inputs.app_name }}.herokuapp.com/"
                echo "::set-output name=descriptor_url::https://${{ github.event.inputs.app_name }}.herokuapp.com/atlassian-connect.json"
              fi
            else
              echo "⚠️ App not responding correctly. Status code: $STATUS_CODE"
              echo "Checking Heroku logs..."
              heroku logs --tail --app ${{ github.event.inputs.app_name }} --num 20
              
              RETRY_COUNT=$(($RETRY_COUNT + 1))
              if [ $RETRY_COUNT -lt $MAX_RETRIES ]; then
                echo "Retrying in 15 seconds..."
                sleep 15
              fi
            fi
          done
          
          # Even if verification fails, we'll consider the deployment successful if Heroku shows the app as deployed
          if [ "$SUCCESS" = false ]; then
            echo "⚠️ Verification attempts failed, but checking if app exists on Heroku..."
            if heroku apps:info ${{ github.event.inputs.app_name }} &> /dev/null; then
              echo "✅ App exists on Heroku, considering deployment successful despite verification issues"
              echo "App URL: https://${{ github.event.inputs.app_name }}.herokuapp.com/"
              echo "Descriptor URL: https://${{ github.event.inputs.app_name }}.herokuapp.com/atlassian-connect.json"
              echo "::set-output name=app_url::https://${{ github.event.inputs.app_name }}.herokuapp.com/"
              echo "::set-output name=descriptor_url::https://${{ github.event.inputs.app_name }}.herokuapp.com/atlassian-connect.json"
              exit 0
            else
              echo "❌ App does not exist on Heroku, deployment failed"
              exit 1
            fi
          fi
        env:
          HEROKU_API_KEY: ${{ secrets.HEROKU_API_KEY }}
      
      - name: Report deployment URLs
        if: always()
        run: |
          if [ -n "${{ steps.verify_deployment.outputs.app_url }}" ]; then
            echo "Deployment completed successfully!"
            echo "App URL: ${{ steps.verify_deployment.outputs.app_url }}"
            echo "Descriptor URL: ${{ steps.verify_deployment.outputs.descriptor_url }}"
            echo "Use the descriptor URL to install the app in Confluence"
          else
            echo "Deployment verification had issues, but the app may still be accessible at:"
            echo "App URL: https://${{ github.event.inputs.app_name }}.herokuapp.com/"
            echo "Descriptor URL: https://${{ github.event.inputs.app_name }}.herokuapp.com/atlassian-connect.json"
          fi
